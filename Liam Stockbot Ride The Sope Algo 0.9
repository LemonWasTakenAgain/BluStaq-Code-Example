from datetime import datetime, timedelta
        
        
          
from datetime import date
        
        
          
import datetime
        
        
          
from Keys import Keys
        
        
          
import alpaca_trade_api as tradeapi
        
        
          
from alpaca_trade_api.rest import TimeFrame
        
        
          


        
        
          
base_url = Keys.base_url
        
        
          
key_id = Keys.key_id
        
        
          
secret_key = Keys.secret_key
        
        
          
TOKEN = Keys.TOKEN
        
        
          


        
        
          
#   Class containing the order/alpaca segment of Stocky.
        
        
          


        
        
          
class Liam_Strategy:
        
        
          


        
        
          
    def __init__(self):
        
        
          
        self.api = tradeapi.REST(
        
        
          
            key_id=key_id,
        
        
          
            base_url=base_url,
        
        
          
            secret_key=secret_key, )
        
        
          
        # Watchlist to determine our stocks we wish to trade.
        
        
          
        self.watchlist_id = Keys.watchlist
        
        
          


        
        
          
        # Dates used to determine the datarange for our stocks.
        
        
          
        self.todays_date = date.today()
        
        
          
        self.yesterday = self.todays_date - \
        
        
          
                         timedelta(days=1)
        
        
          
        # Days variable we can change based off research data.
        
        
          
        self.days = 6
        
        
          
        self.data_range = self.todays_date - \
        
        
          
                          timedelta(days=self.days)
        
        
          
        self.todays_date = str(self.todays_date)
        
        
          
        self.yesterday = str(self.yesterday)
        
        
          
        self.data_range = str(self.data_range)
        
        
          


        
        
          
        # Pulling information from alpaca about our current account and positions ect.
        
        
          
        self.data_url = Keys.data_url
        
        
          
        self.url = Keys.url
        
        
          
        self.orders = self.api.list_orders()
        
        
          
        self.account = self.api.get_account()
        
        
          
        self.positions = self.api.list_positions()
        
        
          
        self.portfolio = float(self.account.portfolio_value)
        
        
          


        
        
          
        #   Initializing counters.
        
        
          
        self.cash = float(self.api.get_account().cash)
        
        
          
        self.cashonhand = (float(self.portfolio) * .2) - self.cash
        
        
          
        self.position_number = [0]
        
        
          
        self.index = -1
        
        
          
        self.active_symbols = []
        
        
          
        self.stock_count = 0
        
        
          
        self.trade_time = 15
        
        
          
        self.time_counter = 5
        
        
          
        self.trade_time = float(self.trade_time)
        
        
          
        self.days_counter = []
        
        
          
        self.buyamt = 0
        
        
          
        self.sellamt = 0
        
        
          
        self.daychange_buy = 0
        
        
          
        self.days_change_pos_math = 0
        
        
          
        self.days_change = 0
        
        
          
        self.change_math = 0
        
        
          
        self.change_pos_math = 0
        
        
          
        self.sell = False
        
        
          
        self.buy = True
        
        
          


        
        
          
        # Config can be commented out if you do not wish to see/edit config.
        
        
          


        
        
          


        
        
          
        self.config()
        
        
          
        self.time()
        
        
          
        self.position_variables()
        
        
          
        self.stock_index()
        
        
          


        
        
          


        
        
          
    # Assures bot doesnt try to trade at the incorrect time.
        
        
          


        
        
          
    def time(self):
        
        
          
        while datetime.datetime.now().hour != self.trade_time:
        
        
          
            print(f'Its not time to trade try again in until 3 MTN time.')
        
        
          
            exit()
        
        
          
        if datetime.datetime.now().hour != self.trade_time:
        
        
          
            count = 0
        
        
          
            for i in self.positions:
        
        
          
                count += 1
        
        
          
                self.position_number.append(count)
        
        
          
            return
        
        
          


        
        
          
    #   Easy way to adjust time/stocks and the time Stocky spends on each stock.
        
        
          


        
        
          
    def config(self):
        
        
          


        
        
          
        count = 0
        
        
          
        change_config = ""
        
        
          
        change_choice = ""
        
        
          


        
        
          


        
        
          


        
        
          


        
        
          


        
        
          


        
        
          


        
        
          


        
        
          
        print('|Stockys current config|',"Days: "+str(self.days),"Time: "+str(self.trade_time),
        
        
          
              "Stocks: "+str(len(self.position_number)),sep="\n")
        
        
          


        
        
          
        change_config = input("Would you like to change the current configuration? Y|N ")
        
        
          
        change_config = change_config.upper
        
        
          


        
        
          
        print(f'|Which config would you like to edit|', "1:Days", "2:Stock", "3:Time Per Stock", "N: Escape",sep="\n")
        
        
          


        
        
          


        
        
          
        change_choice = input("1 2 3 or N")
        
        
          


        
        
          


        
        
          
        if change_choice == "1":
        
        
          
            self.days = input(f'Input the new day parameter: ')
        
        
          
        elif change_choice == "2":
        
        
          
            print('Please liquidate any positions with the alpaca App currently.')
        
        
          
        elif change_choice == "3":
        
        
          
            self.trade_time = input(f'Input the new trade time limit: ')
        
        
          
        else:
        
        
          
            print("Exiting Config without making changes.")
        
        
          


        
        
          


        
        
          
        print('|Stockys New config|', "Days: " + str(self.days), "Time: " + str(self.trade_time),
        
        
          
                "Stocks: " + str(len(self.position_number)), sep="\n")
        
        
          
        keep_changing = input("Would you like to make any more changes? Y|N ")
        
        
          
        if keep_changing == "Y":
        
        
          
            self.config()
        
        
          
        else:
        
        
          
            print("Exiting Config")
        
        
          
            return
        
        
          


        
        
          
    #   Need a wait timer implemented because the connection to alpaca tends to cause data variation if done too quick.
        
        
          


        
        
          
    def waitcheck(self):
        
        
          
        time.sleep(float(self.trade_time)/4)
        
        
          


        
        
          
    #   Getting all the current positions data that we need and putting it into lists.
        
        
          


        
        
          
    def position_variables(self):
        
        
          
        self.position_symbols = [x.symbol for x in self.positions]
        
        
          
        self.position_qtys = [x.qty for x in self.positions]
        
        
          
        self.position_prices = [x.current_price for x in self.positions]
        
        
          
        self.position_changes = [x.change_today for x in self.positions]
        
        
          
        self.position_avg_entry_price = [x.avg_entry_price for x in self.positions]
        
        
          
        self.activities = self.api.get_activities(activity_types='FILL', date=self.todays_date)
        
        
          
        self.buying_power = float(self.account.buying_power)
        
        
          


        
        
          
    #   Pulling the individual stock from our huge list we defined above and setting its variables.
        
        
          


        
        
          
    def position_(self):
        
        
          
        self.symbol = (self.position_symbols[self.index])
        
        
          
        self.change = float(self.position_changes[self.index])
        
        
          
        self.qty = (self.position_qtys[self.index])
        
        
          
        self.price = float(self.position_prices[self.index])
        
        
          
        self.avg_entry = float(self.position_avg_entry_price[self.index])
        
        
          
        self.position = {"Symbol": self.symbol,
        
        
          
                         "Change": self.change,
        
        
          
                         "Qty": self.qty,
        
        
          
                         "Price": self.price,
        
        
          
                         "Avg_Entry": self.avg_entry}
        
        
          
        self.sell = False
        
        
          
        self.buy = False
        
        
          


        
        
          
    #   Tests whether Stocky purchased the stock today.
        
        
          


        
        
          
    def active_check(self):
        
        
          


        
        
          
        for i in self.activities:
        
        
          
            active_symbol_temp = i.symbol
        
        
          
            transaction_time = i.transaction_time
        
        
          
            transaction_time = str(transaction_time)[0:10]
        
        
          
            if transaction_time == self.yesterday:
        
        
          
                return
        
        
          
            else:
        
        
          
                self.active_symbols.append(active_symbol_temp)
        
        
          
        for i in set(self.active_symbols):
        
        
          
            if i == self.symbol:
        
        
          
                print("We already traded", self.symbol)
        
        
          
                self.stock_index()
        
        
          


        
        
          
    #   Defining the orders_ func for later calling.
        
        
          


        
        
          
    def orders_(self, symbol, amt, side):
        
        
          


        
        
          
        if self.buy or self.sell == True:
        
        
          
            if float(amt) <= 0.0000001:
        
        
          
                amt = 0.0000001
        
        
          
            self.order = self.api.submit_order(
        
        
          
                symbol=symbol,
        
        
          
                qty=amt,
        
        
          
                type='market',
        
        
          
                side=side,
        
        
          
                time_in_force='day', )
        
        
          
        if self.sell == True:
        
        
          
            print(f'Stocky sold {symbol}:{amt} at {self.price}')
        
        
          
            amt = float(amt)
        
        
          
            self.price = float(self.price)
        
        
          
            self.avg_entry = float(self.avg_entry)
        
        
          
            profit = (amt * self.price) - (amt * self.avg_entry)
        
        
          
            print(f'Avg entry: {self.avg_entry} Profit:{profit} Buying Power:{self.buying_power}')
        
        
          
        if self.buy == True:
        
        
          
            print(f'Stocky purchased {symbol}:{amt} at {self.price}')
        
        
          
            cost = float(amt) * float(self.price)
        
        
          
            print(f'Avg entry: {self.avg_entry} Cost:{cost} Buying Power:{self.buying_power}')
        
        
          


        
        
          
    #   Retrieves our data for the specified days in config.
        
        
          


        
        
          
    def bars_(self):
        
        
          


        
        
          
        if self.sell and self.buy == False:
        
        
          
            self.stock_index()
        
        
          
        #   The use of alpaca to collect our data is our main issue and assuring all that data matches up.
        
        
          
        #   That being said the data is collected here, and I implemented a wait, so it will correctly line up.
        
        
          
        self.bars = (self.api.get_bars(self.symbol, TimeFrame.Day, self.data_range, self.yesterday, limit=self.days,
        
        
          
                                       adjustment='raw').df)
        
        
          
        days_selected = []
        
        
          
        data_counter = 0
        
        
          
        self.days_change_temp = []
        
        
          
        self.days_change_pos = []
        
        
          


        
        
          
        self.open_bars = self.bars.open
        
        
          
        for i in self.open_bars:
        
        
          
            days_selected.append(i)
        
        
          
        days_research_range = len(days_selected)
        
        
          
        #   Where the bot determines how many days the stock price has gone up or down.
        
        
          
        for i in days_selected:
        
        
          
            if data_counter == days_research_range - 1:
        
        
          
                data_counter = 0
        
        
          
            data_counter += 1
        
        
          
            if days_selected[data_counter] > i:
        
        
          
                self.days_change_temp.append(i)
        
        
          
            elif days_selected[data_counter] < i:
        
        
          
                self.days_change_pos.append(i)
        
        
          


        
        
          
    #   Checks if Stocky is missing any watchlist symbols or positions symbols and orders/adds to watchlist accordingly.
        
        
          


        
        
          
    def watchlist_check(self):
        
        
          
        temp_watchcheck = []
        
        
          
        self.watchlist_assets = self.api.get_watchlist(self.watchlist_id).assets
        
        
          
        for i in self.watchlist_assets:
        
        
          
            self.watchlist_asset = (i['symbol'])
        
        
          
            temp_watchcheck.append(self.watchlist_asset)
        
        
          
        #  Making our lists and checking them twice to see if the stocks are in the watchlist or not.
        
        
          


        
        
          
        position_check = sorted(set(self.position_symbols))
        
        
          
        stock_watchlist_check = sorted(set(temp_watchcheck))
        
        
          
        master_set = stock_watchlist_check + position_check
        
        
          
        master_set = set(master_set)
        
        
          


        
        
          
        # The checking part of the stocks to assure they are all the same testing them against the master set.
        
        
          


        
        
          
        correct = stock_watchlist_check == position_check
        
        
          
        wrong_postition_list = master_set.difference(position_check)
        
        
          
        wrong_watchlist = master_set.difference(stock_watchlist_check)
        
        
          


        
        
          
        # Simple but useful expression to ask if we'd like to add the missing stocks.
        
        
          


        
        
          
        if correct == True:
        
        
          
            print("All symbols in watchlist and positions are correct.")
        
        
          
        if correct == False:
        
        
          
            if len(wrong_watchlist) > 0:
        
        
          
                print("Watchlist is missing, or is about to order ", wrong_watchlist)
        
        
          
            else:
        
        
          
                print("Position list is missing, or has an error for ", wrong_postition_list)
        
        
          


        
        
          
        if len(wrong_watchlist) > 0:
        
        
          
            order_watchlist = input(print("Would you like to order these missing watchlist symbols Y/N? "))
        
        
          
            if order_watchlist == "Y":
        
        
          
                for i in wrong_watchlist:
        
        
          
                    self.orders_(symbol=i, amt=0.00001, side="buy")
        
        
          
        if len(wrong_postition_list) > 0:
        
        
          
            order_watchlist = input(print("Would you like to order these missing position symbols Y/N? "))
        
        
          
            if order_watchlist == "Y":
        
        
          
                for i in wrong_postition_list:
        
        
          
                    self.api.add_to_watchlist(self.watchlist_id, i)
        
        
          


        
        
          
    #   The main math for our stock once it is determined sell/buy true based off the recent days performance.
        
        
          


        
        
          
    def days_math(self):
        
        
          
        #print(f'Beginning days math inputting change:{str(self.change)} and sell:{self.sell} buy:{self.buy}')
        
        
          
        sellchange = self.change
        
        
          
        buychange = self.change
        
        
          
        sellchange = abs(sellchange)
        
        
          
        buychange = abs(buychange)
        
        
          
        # The days math that we retrieved from bars being casted correctly and cleaned up so 0 past days won't affect it.
        
        
          
        time.sleep(.5)
        
        
          
        if self.sell == True:
        
        
          
            self.days_change_pos = len(self.days_change_pos) + 2
        
        
          
            self.change_pos_math = sellchange * self.days_change_pos
        
        
          
            time.sleep(.1)
        
        
          
            self.buy = False
        
        
          
        elif self.buy == True:
        
        
          
            self.days_change_temp = len(self.days_change_temp)
        
        
          
            self.change_math = buychange * self.days_change_temp
        
        
          
            self.sell = False
        
        
          
            time.sleep(.1)
        
        
          


        
        
          
        if self.change_pos_math >= 1.0 and self.sell == True:
        
        
          
            self.change_pos_math = .05
        
        
          
            print(f'price = {self.price} symbol = {self.symbol} avg = {self.avg_entry}')
        
        
          
            self.price = float(self.price)
        
        
          
            self.avg_entry = float(self.avg_entry)
        
        
          


        
        
          
            print(
        
        
          
                f'{self.symbol} had an issue with selling or buying more stock at a multiplier higher than we own and has been reduced.'
        
        
          
            )
        
        
          


        
        
          
        elif self.change_math >= 1.0 and self.buy == True:
        
        
          
            self.change_math = .05
        
        
          
            print(f'price = {self.price} symbol = {self.symbol} avg = {self.avg_entry}')
        
        
          
            print(
        
        
          
                f'{self.symbol} had an issue with selling or buying more stock at a multiplier higher than we own and has been reduced.')
        
        
          
            self.price = float(self.price)
        
        
          
            self.avg_entry = float(self.avg_entry)
        
        
          


        
        
          
    # The buy math section to determine how much it should buy with the 20% cash on hand rule.
        
        
          


        
        
          
    def buymath(self):
        
        
          
        #print(f'Begining buy math inputting price:{str(self.price)},change:{str(self.change_math)}')
        
        
          
        if self.change_math > 0:
        
        
          


        
        
          
            #   The buy math determining how the strategy functions.
        
        
          
            limit = self.buying_power - self.cashonhand
        
        
          
            limit = limit / self.price
        
        
          
            cashonhand = limit * .2
        
        
          
            limit = limit - cashonhand
        
        
          
            limit = float(limit)
        
        
          
            self.buyamt = limit * float(self.change_math)
        
        
          
            self.buyamt = round(self.buyamt,4)
        
        
          
            #print(f'Ending buy math returning sellamt:{self.buyamt}')
        
        
          
        else:
        
        
          
            self.stock_index()
        
        
          


        
        
          
    #   The sell math of Stocky to determine how much to sell we sell on a higher multiplier.
        
        
          


        
        
          
    def sellmath(self):
        
        
          
        #print(f'Begining sell math inputting price:{str(self.price)},change:{str(self.change_pos_math)}')
        
        
          
        #   The sell function its much shorter than the buy but with the same principles and day multiplier it determines how much we sell for.
        
        
          
        if self.change_pos_math > 0:
        
        
          
            if self.avg_entry > self.price:
        
        
          
                entry_multiplier = float(self.price) - float(self.avg_entry)
        
        
          
                entry_multiplier = float(entry_multiplier) / float(self.price)
        
        
          
                self.sellamt = float(entry_multiplier) + float(self.change_pos_math)
        
        
          
            elif self.avg_entry < self.price:
        
        
          
                self.sellamt = float(self.change_pos_math)
        
        
          
                sell_limit = self.qty
        
        
          
                sell_limit = str(sell_limit)
        
        
          
                sell_limit = float(sell_limit)
        
        
          
                self.sellamt = sell_limit * float(self.sellamt)
        
        
          
                self.sellamt = round(self.sellamt,4)
        
        
          
                #print(f'Ending sell math returning sellamt:{str(self.sellamt)}')
        
        
          
        else:
        
        
          
            self.stock_index()
        
        
          


        
        
          
    #   Determines the order of events for a stock determined based whether it should be buy/sell.
        
        
          


        
        
          
    def sellbuy(self):
        
        
          
        try:
        
        
          
            if self.change > 0 and len(self.days_change_temp) < len(self.days_change_pos):
        
        
          
                self.sell = True
        
        
          
                self.buy = False
        
        
          
                self.days_math()
        
        
          
                self.waitcheck()
        
        
          
                self.active_check()
        
        
          
                self.waitcheck()
        
        
          
                self.sellmath()
        
        
          
                self.sellfunc()
        
        
          
                self.stock_index()
        
        
          
                self.sell = False
        
        
          
            if self.change < 0 and len(self.days_change_temp) > len(self.days_change_pos):
        
        
          
                self.days_math()
        
        
          
                self.waitcheck()
        
        
          
                self.active_check()
        
        
          
                self.waitcheck()
        
        
          
                self.buymath()
        
        
          
                self.buyfunc()
        
        
          
                self.stock_index()
        
        
          
                self.buy = False
        
        
          
            elif self.change == 0.0:
        
        
          
                self.stock_index()
        
        
          
        except(IndexError):
        
        
          
            self.watchlist_check()
        
        
          
            print("Stocky has finished trading thankyou!")
        
        
          
            exit()
        
        
          


        
        
          
    # Finally places the buy order after checking against all the safety nets.
        
        
          


        
        
          
    def buyfunc(self):
        
        
          
        #print(f'Beginning buy func inputting symbol:{self.symbol} and amt:{str(self.buyamt)}.')
        
        
          
        while self.buy == True:
        
        
          
            self.buyamt = float(self.buyamt)
        
        
          
            if self.buyamt != 0.0:
        
        
          
                #   This finally checks one more time if all else failed and the bot couldn't update its info and tries buying more than it can afford this will stop it before the code ends.
        
        
          


        
        
          
                if (float(self.buyamt) * float(self.price)) > float(self.buying_power):
        
        
          
                    self.buyamt = str(self.buyamt)
        
        
          
                    print("ERROR ERROR ERROR")
        
        
          
                    print(f' Bot tried to purchase {self.buyamt} orders of {self.symbol}, but could not afford it.')
        
        
          
                    self.buy = False
        
        
          
                    self.stock_index()
        
        
          


        
        
          
                #   This portion stops the bot from purchasing more than .2 of our whole portfolio value.
        
        
          


        
        
          
                elif (self.buyamt * self.price) > (self.portfolio * .2):
        
        
          
                    print(
        
        
          
                        f'Bot tried to purchase {self.buyamt} orders of {self.symbol}, but this order is greater than 20% of our portfolio value.')
        
        
          
                    self.buy = False
        
        
          
                    self.stock_index()
        
        
          
                elif self.cashonhand < 0:
        
        
          
                    print(
        
        
          
                        f'Stocky is ${abs(round(float(self.cashonhand),2))} away from being able to buy stocks again.')
        
        
          
                    self.buy = False
        
        
          
                    self.stock_index()
        
        
          
                else:
        
        
          
                    #   This is where the bot sends a call to the order_ func and finally orders the stock with all of its math.
        
        
          
                    self.buyamt = str(abs(self.buyamt))
        
        
          
                    self.orders_(symbol=self.symbol, amt=self.buyamt, side='buy')
        
        
          
                    #print(f'Exiting buy func returning symbol:{self.symbol} and amt:{str(self.buyamt)}')
        
        
          
                    self.buy = False
        
        
          


        
        
          
    # Finally places the sell order after checking its safety nets not as much to catch here.
        
        
          


        
        
          
    def sellfunc(self):
        
        
          
        #print(f'Beginning sell func inputting symbol:{self.symbol} and amt:{str(self.sellamt)}.')
        
        
          


        
        
          
        while self.sell == True:
        
        
          
            #   Assuring bot doesnt attempt to sell more stock than we own.
        
        
          
            self.sellamt = float(self.sellamt)
        
        
          
            self.qty = float(self.qty)
        
        
          
            if self.sellamt != 0.0:
        
        
          
                if self.sellamt >= self.qty:
        
        
          
                    self.qty = str(self.qty)
        
        
          
                    print(f'Stocky tried to sell {self.sellamt} orders of {self.symbol}, but we only own {str(round(float(self.qty),2))}.')
        
        
          
                    self.stock_index()
        
        
          
                elif float(self.avg_entry) > float(self.price):
        
        
          
                    print(f'Stocky cannot sell when the entry:{str(round(self.avg_entry,2))} was above the price:{self.price}.')
        
        
          
                    self.stock_index()
        
        
          
                else:
        
        
          


        
        
          
                    # The actual sell order calling to order_ func with the amt after its been determined by all the math.
        
        
          


        
        
          
                    self.sellamt = str(self.sellamt)
        
        
          
                    self.orders_(symbol=self.symbol, amt=self.sellamt, side='sell')
        
        
          
                    #print(f'Exiting sell func returning symbol:{self.symbol} and amt:{str(self.sellamt)}')
        
        
          
                    self.sell = False
        
        
          
            else:
        
        
          
                break
        
        
          


        
        
          
    # The order all of the functions are called and a return back for when we need to move onto the next stock.
        
        
          


        
        
          
    def stock_index(self):
        
        
          
        for i in range(len(self.position_number)):
        
        
          
            self.index += 1
        
        
          
            self.position_()
        
        
          
            print(f'Stocky is trading {self.index}/{len(self.position_number)}: {self.symbol}')
        
        
          
            self.bars_()
        
        
          
            self.waitcheck()
        
        
          
            self.sellbuy()
        
        
          
            self.waitcheck()
        
        
          
            if i == range(len(self.position_number)):
        
        
          
                print("Last stock exiting code goodbye!")
        
        
          
                exit()
        
        
          


        
        
          


        
        
          
Liam_Strategy()
        
        
          
import time
        
        
          
